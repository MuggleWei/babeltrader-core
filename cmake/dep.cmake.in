cmake_minimum_required(VERSION 3.0.2)

################################################################
# import mugglecpp
message("-- import mugglecpp")
configure_file(
	${CMAKE_SOURCE_DIR}/cmake/mugglecpp.cmake.in
	${CMAKE_CURRENT_BINARY_DIR}/mugglecpp-download/CMakeLists.txt)
execute_process(COMMAND ${CMAKE_COMMAND} -G "${CMAKE_GENERATOR}" .
	RESULT_VARIABLE result
	WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/mugglecpp-download)
if (result)
	message(FATAL_ERROR "cmake step for mugglecpp failed: ${result}")
endif()
execute_process(COMMAND ${CMAKE_COMMAND} --build .
	RESULT_VARIABLE result
	WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/mugglecpp-download)
if (result)
	message(FATAL_ERROR "build step for mugglecpp failed: ${result}")
endif()

set(MUGGLE_BUILD_TRACE OFF CACHE BOOL "")
set(MUGGLE_BUILD_SHARED_LIB ON CACHE BOOL "")
set(MUGGLE_BUILD_STATIC_PIC ON CACHE BOOL "")
set(MUGGLE_BUILD_BENCHMARK OFF CACHE BOOL "")
set(MUGGLE_BUILD_TESTING OFF CACHE BOOL "")
set(MUGGLE_BUILD_EXAMPLE OFF CACHE BOOL "")

set(MUGGLE_CPP_BUILD_SHARED_LIB ON CACHE BOOL "")
set(MUGGLE_CPP_BUILD_STATIC_PIC ON CACHE BOOL "")
set(MUGGLE_CPP_BUILD_EXAMPLE OFF CACHE BOOL "")
set(MUGGLE_CPP_DOWNLOAD_MUGGLEC ON CACHE BOOL "")

add_subdirectory(
	${CMAKE_CURRENT_BINARY_DIR}/mugglecpp-src
	${CMAKE_CURRENT_BINARY_DIR}/mugglecpp-build
)

################################################################
# import rapidjson

message("-- import rapidjson")
configure_file(
	${CMAKE_SOURCE_DIR}/cmake/rapidjson.cmake.in
	${CMAKE_CURRENT_BINARY_DIR}/rapidjson-download/CMakeLists.txt)
execute_process(COMMAND ${CMAKE_COMMAND} -G "${CMAKE_GENERATOR}" .
	RESULT_VARIABLE result
	WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/rapidjson-download)
if (result)
	message(FATAL_ERROR "cmake step for rapidjson failed: ${result}")
endif()
execute_process(COMMAND ${CMAKE_COMMAND} --build .
	RESULT_VARIABLE result
	WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/rapidjson-download)
if (result)
	message(FATAL_ERROR "build step for rapidjson failed: ${result}")
endif()

################################################################
# import googletest
if (BABELTRADER_BUILD_TESTING)
	message("-- import googletest")

	# search gtest first
	find_package(GTest)

	if (GTEST_FOUND)
		set(FOUND_GTEST_FROM_SEARCH ON)

		message("-- Find GTest - use gtest from search")
		message("-- GTest include directories: ${GTEST_INCLUDE_DIRS}")
		message("-- GTest both libraries: ${GTEST_BOTH_LIBRARIES}")
	else()
		configure_file(
			${CMAKE_SOURCE_DIR}/cmake/googletest.cmake.in
			googletest-download/CMakeLists.txt)
		execute_process(COMMAND ${CMAKE_COMMAND} -G "${CMAKE_GENERATOR}" .
			RESULT_VARIABLE result
			WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/googletest-download )
		if(result)
			message(FATAL_ERROR "CMake step for googletest failed: ${result}")
		endif()
		execute_process(COMMAND ${CMAKE_COMMAND} --build .
			RESULT_VARIABLE result
			WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/googletest-download )
		if(result)
			message(FATAL_ERROR "Build step for googletest failed: ${result}")
		endif()
		
		# Prevent overriding the parent project's compiler/linker
		# settings on Windows
		set(gtest_force_shared_crt ON CACHE BOOL "" FORCE)
		
		# Add googletest directly to our build. This defines
		# the gtest and gtest_main targets.
		add_subdirectory(${CMAKE_CURRENT_BINARY_DIR}/googletest-src
						${CMAKE_CURRENT_BINARY_DIR}/googletest-build
						EXCLUDE_FROM_ALL)
		
		include_directories("${gtest_SOURCE_DIR}/include")
		
		set(GTEST_INCLUDE_DIRS "${gtest_SOURCE_DIR}/include")
		set(GTEST_BOTH_LIBRARIES gtest_main)
		set(FOUND_GTEST_FROM_DOWNLOAD ON)
	endif()
endif()
